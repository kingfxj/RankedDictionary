#
docs = [{'hatch': [1, 1.0, 1, 0.6989700043360189, {1: [1]}], 'whole': [1, 1.0, 1, 0.6989700043360189, {0: [8]}],
 'true': [1, 1.0, 1, 0.6989700043360189, {2: [12]}], 'alive': [1, 1.0, 1, 0.6989700043360189, {2: [17]}],
 'lot': [1, 1.0, 1, 0.6989700043360189, {0: [10]}], 'everywhere': [1, 1.0, 1, 0.6989700043360189, {3: [19]}],
 'you’ll': [1, 1.0, 1, 0.6989700043360189, {4: [3]}], 'go': [1, 1.0, 1, 0.6989700043360189, {4: [4]}],
 'yes': [1, 1.0, 1, 0.6989700043360189, {4: [9]}], 'than': [2, 1.3010299956639813, 1, 0.6989700043360189,{2: [11, 21]}], 'you': [7, 1.845098040014257, 3, 0.22184874961635637, {0: [5], 2: [3, 5, 7, 22], 4: [7, 10]}],
 'funny': [1, 1.0, 1, 0.6989700043360189, {3: [16]}], 'get': [1, 1.0, 1, 0.6989700043360189, {0: [15]}],
 'the': [3, 1.4771212547196624, 3, 0.22184874961635637, {0: [0], 1: [2], 4: [1]}],
 'care': [1, 1.0, 1, 0.6989700043360189, {0: [6]}], 'better': [1, 1.0, 1, 0.6989700043360189, {0: [16]}],
         'youer': [1, 1.0, 1, 0.6989700043360189, {2: [20]}], 'blue': [1, 1.0, 1, 0.6989700043360189, {3: [6]}],
          'horton': [1, 1.0, 1, 0.6989700043360189, {1: [0]}], 'here': [2, 1.3010299956639813, 1, 0.6989700043360189, {3: [11, 13]}],
           'that': [1, 1.0, 1, 0.6989700043360189, {2: [8]}], 'thing': [1, 1.0, 1, 0.6989700043360189, {3: [17]}],
            'happy': [1, 1.0, 1, 0.6989700043360189, {2: [0]}], 'to': [4, 1.6020599913279625, 3, 0.22184874961635637, {0: [14], 2: [2], 3: [10, 14]}],
             'succeed': [1, 1.0, 1, 0.6989700043360189, {4: [8]}], 'hundred': [1, 1.0, 1, 0.6989700043360189, {1: [19]}], 'there': [3, 1.4771212547196624, 2, 0.3979400086720376, {2: [13], 3: [9, 15]}],
              'per': [1, 1.0, 1, 0.6989700043360189, {1: [20]}],
              '98': [1, 1.0, 1, 0.6989700043360189, {4: [13]}], 'place': [1, 1.0, 1, 0.6989700043360189, {4: [2]}], 'not': [1, 1.0, 1, 0.6989700043360189, {0: [18]}], 'guaranteed': [1, 1.0, 1, 0.6989700043360189, {4: [17]}],
               'birthday': [1, 1.0, 1, 0.6989700043360189, {2: [1]}],
               'is': [4, 1.6020599913279625, 2, 0.3979400086720376, {0: [12], 2: [9, 14, 19]}], 'unless': [1, 1.0, 1, 0.6989700043360189, {0: [2]}], 'meant': [2, 1.3010299956639813, 1, 0.6989700043360189, {1: [5, 14]}],
               'fish': [4, 1.6020599913279625, 1, 0.6989700043360189, {3: [1, 3, 5, 7]}], 'cent': [1, 1.0, 1, 0.6989700043360189, {1: [21]}], 'someone': [1, 1.0, 1, 0.6989700043360189, {0: [3]}], 'a': [1, 1.0, 1, 0.6989700043360189, {0: [7]}],
                'faithful': [1, 1.0, 1, 0.6989700043360189, {1: [17]}],
                'going': [1, 1.0, 1, 0.6989700043360189, {0: [13]}], 'will': [2, 1.3010299956639813, 1, 0.6989700043360189, {4: [6, 11]}], 'what': [2, 1.3010299956639813, 1, 0.6989700043360189, {1: [6, 12]}],
                'one': [3, 1.4771212547196624, 3, 0.22184874961635637, {1: [18], 2: [16], 3: [0]}], 'truer': [1, 1.0, 1, 0.6989700043360189, {2: [10]}], 'it’s': [1, 1.0, 1, 0.6989700043360189, {0: [17]}], '34': [1, 1.0, 1, 0.6989700043360189, {4: [15]}],
                 'nothing': [1, 1.0, 1, 0.6989700043360189, {0: [11]}], 
                'two': [1, 1.0, 1, 0.6989700043360189, {3: [2]}], 'like': [1, 1.0, 1, 0.6989700043360189, {0: [4]}], 'from': [1, 1.0, 1, 0.6989700043360189, {3: [8]}], 'lorax': [1, 1.0, 1, 0.6989700043360189, {0: [1]}],
                 'today': [1, 1.0, 1, 0.6989700043360189, {2: [4]}], 'no': [1, 1.0, 1, 0.6989700043360189, {2: [15]}], 'awful': [1, 1.0, 1, 0.6989700043360189, {0: [9]}], 'and': [4, 1.6020599913279625, 3, 0.22184874961635637, {1: [9], 3: [12], 4: [5, 14]}],
                  'said': [2, 1.3010299956639813, 1, 0.6989700043360189, {1: [8, 11]}], 'elephant’s': [1, 1.0, 1, 0.6989700043360189, {1: [16]}],
                  'i': [4, 1.6020599913279625, 1, 0.6989700043360189, {1: [4, 7, 10, 13]}], 'who': [1, 1.0, 1, 0.6989700043360189, {2: [18]}],
                  'indeed': [1, 1.0, 1, 0.6989700043360189, {4: [12]}], 'egg': [1, 1.0, 1, 0.6989700043360189, {1: [3]}],
                'an': [1, 1.0, 1, 0.6989700043360189, {1: [15]}], 'red': [1, 1.0, 1, 0.6989700043360189, {3: [4]}], 'percent': [1, 1.0, 1, 0.6989700043360189, {4: [16]}], 'oh': [1, 1.0, 1, 0.6989700043360189, {4: [0]}], 'are': [2, 1.3010299956639813, 2, 0.3979400086720376, {2: [6], 3: [18]}]}]


query = ":get better: going :like you: lot"

#print(docs)

class DocumentPool:

	def __init__(self, query,documents ,k):
		self.docs = documents
		self.q= query
		self.k = k
		self.keywords = []
		self.phrases = []
		self.phrasePostings=[]



	def separate(self):
		self.q=self.q.split(':')
		for item in self.q:
			if len(item)==0:
				continue
			if item[0]== ' ':
				temp = item[1:]
				self.keywords.append(temp)
			else:
				self.phrases.append(item.split())

	def getIntersection(self):
		pointer_1 = 0
		pointer_2 = 0
		answer = []
		for item in self.phrases:


			while pointer_1< len(item[0]) and pointer_2 < len(item[1]):
				if self.posting_1[1][pointer_1] ==self.posting_2[1][pointer_2]:
					answer[1].append(self.posting_1[1][pointer_1])
					pointer_1 +=1
					pointer_2 +=1
				elif self.posting_1[1][pointer_1] <self.posting_2[1][pointer_2]:
					pointer_1 +=1
				else:
					pointer_2 +=1
			return answer

	
	def getPostings(self):
		for posting in self.docs:
			for partial in self.phrases:
				for term in partial:
					if term in posting.keys():
						self.phrasePostings.append([term,posting[term]])

	def Match(self):
		for var in self.phrases:
			for index in range(len(var)):
				var.append(index)

	def getCosineScore(self):
		return 0
	def getPhrases(self):
		return self.phrases
	def getKeywords(self):
		return self.keywords


pool = DocumentPool(query,docs,2)
pool.separate()
print(pool.getPhrases())
pool.getPostings()
print(pool.phrasePostings)
# get docs with consecutive words
pool.Match()
print(pool.getPhrases())




